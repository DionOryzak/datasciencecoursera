
var app = angular.module('bopquote', ['ngMaterial', 'ngResource','google.places','ngSanitize','duScroll'])

app.controller('quoteController', ['$scope','$http','$location','selectService','formdataService','$document','$timeout',function($scope,$http,$location,selectService,formdataService,$document,$timeout) {

  $scope.newQuote={};
  $scope.temp={};
  $scope.hint= {}; 
  // $scope.quoteResult={};
  $scope.ngHide={};
  $scope.showLoadingImage=true;
  $scope.ratingQuestions={};
  $scope.quoteResponse={};
  

  $scope.todayDate = new Date();
  var utcDate= new Date(new Date().toUTCString());
  var offset = new Date().getTimezoneOffset();  
  utcDate.setMinutes(utcDate.getMinutes()-offset);
  var offsetDate = new Date(utcDate);
  var dateregex=new RegExp("[0-9]{4}-[0-9]{2}-[0-9]{2}");
  
  
  $scope.formdata=formdataService.query();
  $scope.formdata.$promise.then(function(result){
    for(var i=0;i<$scope.formdata.length;i++){
      for(var j=0; j<$scope.formdata[i].questions.length;j++){
        var htmlId = $scope.formdata[i].questions[j].htmlId;
        $scope.hint[htmlId]=$scope.formdata[i].questions[j].hint;
        var questionValue = $scope.formdata[i].questions[j].value;
        if(questionValue=='today'){
          $scope.newQuote[htmlId]={value: offsetDate};
        }else if(dateregex.test(questionValue)){
          $scope.newQuote[htmlId]={value: new Date(questionValue.substr(0,4),(questionValue.substr(5,2)-1),questionValue.substr(8,2))};
        }else if($scope.formdata[i].questions[j].htmlId.trim().length >0){
          $scope.newQuote[htmlId]={value: questionValue};  
        }
      }
    }

    $scope.selectedIndex = 0;
    $scope.disabled=[];
    $scope.disabled[0]=false;
    for(var k=1; k<$scope.formdata.length;k++){    
        $scope.disabled[k]=true;
    }
    $scope.quoteTabDisabled=true;
    $scope.submissionTabDisabled=true;
    $scope.max= $scope.formdata.length+1;


    angular.element(document).ready(function(){      
        $scope.showLoadingImage=false;
        // $scope.requestQuote();
    });
  });


//Wizard
   
    $scope.showNextButton=true;

    $scope.buttonNext='Next';

//Question elements
    $scope.selectunique=[
        'territory',
        'ppc',
        'buildingCode',
        'constructionType',
        'occupantLessor',
        'policyTerm',
        'propertyDeductible',
        'windDeductible',
        'propertyLiabDeductible',
        'liabMedExpensesLimit',
        'aggLimitProductsOperations',
        'aggLimitLiabMedical',
        'contractorsInstallationLimit',
        'contractorsToolsType',
        'contractorsBlanketSublimit',
        'motelLimitPerGuest',
        'motelSafeDepositLimitPerGuest',
        'autoLiabilityLimit',
        'autoLiabiityDeductible',
        'buildingsAnnualLimitIncrease',
        'businessIncomeDependentPropertiesType',
        'businessIncomePayrollNumDays',
        'businessIncomeExtendedNumDays',
        'employeeDishonestyLimit',
        'fireDepartmentLimit',
        'equipmentBreakdownDeductible',
        'equipmentBreakdownTimeDeductible',
        'damagePremisesRented',
        'optionalPerPersonMedicalLimit',
        'businessIncomeExpenseLimit',
        'businessIncomeExtraExpenseNumberOfMonths',
        'computerFraudLimit',
        'condoUnitownersOptionalLimit',
        'condoUnitownersAssocSublimit',
        'fungiOption',
        'fungiNumberOfDays',
        'ordinanceCoverage',
        'spoilageCoverage',
        'refrigerationAgreement',
        'vacancyPermit',
        'limitationsRoofSurfacing',
        'offPremiseVehicleMobile',
        'offPremiseInterruptionVehiclesExtendedIncomeNumDay',
        'epl',
        'eplLimit',
        'eplDeductible',
        'hiredAutoCoverage',
        'hiredAutoLimit',
        'pharmacistsProfLiab',
        'infoSecurityTier',
        'infoSecurityLimit',
        'infoSecurityDeductible',
        'infoSecurityBreachContract'
        ];  
    $scope.options =[];    
    $scope.selectunique.forEach(function(select){
      $scope.options[select]=selectService.query({htmlId:select});  
    });    

    $scope.options.classDesc1=selectService.query({htmlId:"classDesc1"});
    $scope.options.classDesc1.$promise.then(function(result){
      $scope.options.classDesc1=result;
      $scope.options.classDesc1.unshift({"value":"0","display":"Please select an industry class"});
      $scope.newQuote.classDesc1.value="0"; 
    });   

    $scope.questiondisabled ={};
    $scope.questiondisabled.classDesc2=true;
    $scope.questiondisabled.classDesc3=true; 
    $scope.ngHide.classDesc2=true;
    $scope.ngHide.classDesc3=true;


//Functions
  
    $scope.change=function(htmlId,newValue){
      
      $scope.newQuote[htmlId]={value:newValue};

      $scope.hint[htmlId]='';
      switch(htmlId){  

        case 'classDesc1':
          // alert('inside change. classDesc1='+$scope.newQuote.classDesc1.value);
          $scope.options.classDesc2=selectService.query({htmlId:'classDesc2',classDesc1:$scope.newQuote.classDesc1.value});        
          $scope.ngHide.classDesc3=true;
          $scope.questiondisabled.classDesc3=true;
          $scope.newQuote.classDesc3.value='';
          // alert('about to get classDes2 values');
          $scope.options.classDesc2.$promise.then(function(result){
            if(result.length<=1){
              // alert('sole value='+result[0].value);
              $scope.ngHide.classDesc2=true;
              $scope.questiondisabled.classDesc2=true;
              $scope.newQuote.classDesc2.value=result[0].value;
            }else{
              $scope.ngHide.classDesc2=false;
              $scope.questiondisabled.classDesc2=false;
              $scope.options.classDesc2=result;
              $scope.options.classDesc2.unshift({"value":"0","display":"Please select an industry sub-class"});
              $scope.newQuote.classDesc2.value="0";   
              $scope.hint.classDesc2='Please select sub-class';  
            }             
          });
        case 'classDesc2':
          // alert('inside change. classDesc2='+$scope.newQuote.classDesc2.value);
          $scope.options.classDesc3=selectService.query({htmlId:'classDesc3',classDesc1:$scope.newQuote.classDesc1.value,classDesc2:$scope.newQuote.classDesc2.value});        
          $scope.options.classDesc3.$promise.then(function(result){
            if(result.length<=1){
              // alert('sole value='+result[0].value);
              $scope.ngHide.classDesc3=true;
              $scope.questiondisabled.classDesc3=true;
              $scope.newQuote.classDesc3.value=result[0].value;
            }else{
              $scope.ngHide.classDesc3=false;
              $scope.questiondisabled.classDesc3=false;
              $scope.options.classDesc3=result;
              $scope.options.classDesc3.unshift({"value":"0","display":"Please select an industry sub-sub-class"}); 
              $scope.newQuote.classDesc3.value="0";
              $scope.hint.classDesc3='Please select sub-class';  
            }            
          });   
        default:
          break;     
      }   
    }  

    $scope.scrollTop = function(){
      $document.scrollTo(quoteController, 30, 1000);
    };

    $scope.clickTab = function() {
      if($scope.selectedIndex == $scope.max){
        //$scope.showNextButton=false;
      }else if($scope.selectedIndex < $scope.max && $scope.buttonNext !== 'Next'){
        $scope.buttonNext='Request Quote';
        $scope.showNextButton=true;
      }
    };
/*
    $scope.cloneTab = function (index) {            
      //Use JSON parse and stringify to copy by value rather than by reference
      $scope.filters[newTabTitle]= JSON.parse(JSON.stringify($scope.filters[currentTabTitle]));
      $scope.tablevalues[newTabTitle]= JSON.parse(JSON.stringify($scope.tablevalues[currentTabTitle]));      
      $scope.policyTerm[newTabTitle]=$scope.policyTerm[currentTabTitle];
      $scope.effectiveDate[newTabTitle]= $scope.effectiveDate[currentTabTitle];
      $scope.showtable[newTabTitle]=true;
      tabs.push({ section: "Location", questions: $scope.newQuote.questions, filters: $scope.filters[newTabTitle], showtable: $scope.showtable[newTabTitle], policyTerm: $scope.policyTerm[newTabTitle], effectiveDate: $scope.effectiveDate[newTabTitle], disabled: false});      
    };
*/
    $scope.nextTab = function() {
      var validform=true;
      var index =$scope.selectedIndex + 1;    
      switch(index){
        case 1:
         
          break;

        case 2:
         
          break;

        case 3:
         
          break;

        default:
          break;     
      }
      if(validform==true){
        // alert('inside validform. index='+index);
        $scope.disabled[index]=false; 
        $timeout(function(){         
          $scope.selectedIndex = index;
        },0);
        // alert('index='+index);
        // alert('index='+index+' out of $scope.max='+$scope.max);
        if($scope.selectedIndex == ($scope.max-3)){
          $scope.buttonNext='Request Quote';
          // alert('changing to request quote button');
         
        }else if($scope.selectedIndex == ($scope.max-2)){
          $scope.buttonNext='Finalize Quote';
          // alert('triggering requestQuote');
          $scope.requestQuote();
        }else if($scope.selectedIndex == $scope.max-1){
          // $scope.showNextButton=false;
          // alert('triggering finalizeQuote');
          $scope.finalizeQuote();
        }
      }
      $scope.scrollTop();
    };

   
     //$scope.$apply();      

    $scope.requestQuote = function() {      
      //alert(JSON.stringify($scope.newQuote));
      var objectSize = Object.keys($scope.newQuote).length;
      // alert(objectSize);
      $scope.quoteTabDisabled=false;
      
      var i=0;
      angular.forEach($scope.newQuote,function(value,key){
        $scope.ratingQuestions[key]=value.value;
        // alert(value.value);
        i++;
        if(i==objectSize){
          // alert(JSON.stringify($scope.newQuote));
          // alert($scope.newQuote.classDesc1.value);
          // alert($scope.newQuote.sicCode.value);
          $http.post('/api/requestQuote',$scope.ratingQuestions).then(function onSuccess(data){
            // alert(JSON.stringify(data));
            // $scope.quoteResponse=data.data;
            $scope.quoteResponse.totalPremium=data.data.totalPremium;
            $scope.quoteResponse.premium=data.data.Premium;
            $scope.quoteResponse.other=data.data.Other;
            // alert($scope.newQuote.sicCode);
            // angular.forEach(data.data,function(value,key){
            // for(var key in $scope.quoteResult){
              // alert($scope.quoteResult[key]);
              // alert(data.data.sicCode);
            // $scope.newQuote.sicCode.value=data.data.sicCode;
            // angular.forEach(data.data,function(value,key){  
            //   $scope.newQuote[key].value=value;
            // });
            // }
            // alert($scope.newQuote.sicCode); 
          }).catch(function onError(data){
            alert('An error has occurred. Your quote may not have been submitted. Please try again.'); 
            $scope.formdata[3].questions[0].customhtml ='<div  class="md-block"> <strong>Error</strong> Your quote request has not worked. Please try again.</div>';
          });    
        }
      });      
    };

    $scope.finalizeQuote = function() {
      $scope.submissionTabDisabled=false;
      var phone = $scope.newQuote.phoneNumber.value.replace(/\D/g,'').replace(/^1+/, '');     
      $scope.newQuote.phoneNumber.value = '('+phone.substr(0, 3)+') '+phone.substr(3,3)+'-'+phone.substr(6,4);
      //alert(JSON.stringify($scope.newQuote));
      var ratingQuestions={};
      var objectSize = Object.keys($scope.newQuote).length;
      //alert(objectSize);
      var i=0;
      angular.forEach($scope.newQuote,function(value,key){
        ratingQuestions[key]=value.value;
        i++;
        if(i==objectSize){
          //alert(JSON.stringify(ratingQuestions));
          $http.post('/api/finalizeQuote',ratingQuestions).then(function onSuccess(data){
          }).catch(function onError(data){
            alert('An error has occurred. Your quote may not have been submitted. Please try again.'); 
            $scope.formdata[3].questions[0].customhtml ='<div  class="md-block"> <strong>Error</strong> Your quote may not have been submitted. If you did not receive a confirmation email please restart your quote.</div>';
          });    
        }
      });      
    };

}]);


app.factory('selectService', ['$resource' , function($resource){
  return $resource('/api/select/:htmlId/');
}]);

app.factory('formdataService', ['$resource' , function($resource){
  return $resource('/api/formdata');
}]);

app.directive("rscQuestionBlock", function() {
    return {
        restrict: 'E',
        require: 'ngModel',
        scope: {
         questionlabel: '@',
         ngModel: '=',
         temp: '=',
         ngDisabled: '=',
         options: '=',
         type: '=',
         hint: '=',
         tooltip: '=',
         customstyle: '=',
         customhtml: '=',
         todaydate: '='
        },
        templateUrl : 'rscQuestionBlock.html',
        link: function(scope, element, attrs, ctrl){
          scope.changeField = function(newValue){
            ctrl.$setViewValue(newValue);            
          }    
          ctrl.$viewChangeListeners.push(function(){
            scope.$eval(attrs.ngChange);
          });                               
        }
    };
});

function stateToStateCode(state){
  var statearray=['AL','AK','AZ','AR','CA','CO','CT','DE','DC','FL','GA','HI','ID','IL','IN','IA','KS','KY','LA','ME','MD','MA','MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND','OH','OK','OR','PA','RI','SC','SD','TN','TX','UT','VT','VA','WA','WV','WI','WY'];
  return statearray[(state-1)];
}




// Notes:
// - Combine the two abuse and molestation endorsements into one dropdown, with none as an option and make one of them compulsory for photography
// Theft of clients property not eligible for selection on self storage faciltiies or residential cleaning services
